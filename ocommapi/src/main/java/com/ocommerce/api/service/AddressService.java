package com.ocommerce.api.service;

import com.ocommerce.api.constants.AddressStatus;
import com.ocommerce.api.exception.AddressNotFoundException;
import com.ocommerce.api.jpa.entities.Address;
import com.ocommerce.api.jpa.repositories.AddressRepository;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

@Service
public class AddressService {
    private final AddressRepository addressRepository;

    public AddressService(AddressRepository addressRepository) {
        this.addressRepository = addressRepository;
    }

    public Address getDefaultAddressForUser(Long userId) throws AddressNotFoundException {
        return addressRepository.findDefaultAddressByUserId(userId)
                .or(() -> addressRepository.findFirstByUserId(userId))
                .orElseThrow(() -> new AddressNotFoundException("Address not found for user id: " + userId));
    }

    @Transactional
    public Address createAddress(Address address) {
        if (address.getAddressId() != null) {
            throw new IllegalArgumentException("Address Id will be generated by the database, do not set it manually.");
        }
        boolean isDefault = Boolean.TRUE.equals(address.isDefaultAddress());
        Address saved = addressRepository.save(address);
        if (isDefault) {
            addressRepository.unsetDefaultForOtherAddresses(address.getUser().getId(), saved.getAddressId());
        }
        return saved;
    }

    @Transactional
    public Address updateAddress(Address address) throws AddressNotFoundException {
        // Check if the address exists
        if (address.getAddressId() == null) {
            throw new AddressNotFoundException("Address not found with id: " + address.getAddressId());
        }
        Address oldAddress = addressRepository.findById(address.getAddressId())
                .orElseThrow(
                        () -> new AddressNotFoundException("Address not found with id: " + address.getAddressId()));
        // If the address is being set as default, unset the default for other addresses
        // Mark old addresses as status 'T'
        oldAddress.setStatus(AddressStatus.TERMINATED.getCode());
        oldAddress.setDefaultAddress(false); // Unset default address
        addressRepository.save(oldAddress);

        // Save the new address (as a new record)
        address.setAddressId(null); // Ensure it's saved as new
        boolean isDefault = Boolean.TRUE.equals(address.isDefaultAddress());
        Address saved = addressRepository.save(address);
        if (isDefault) {
            addressRepository.unsetDefaultForOtherAddresses(address.getUser().getId(), saved.getAddressId());
        }
        return saved;
    }

    public void deleteAddress(Long addressId) {
        addressRepository.deleteById(addressId);
    }

    public Address getAddressById(Long addressId) throws AddressNotFoundException {
        return addressRepository.findById(addressId)
                .orElseThrow(() -> new AddressNotFoundException("Address not found with address id: " + addressId));
    }
}